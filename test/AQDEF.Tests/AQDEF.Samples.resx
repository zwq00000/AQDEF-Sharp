<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="dfqWithString" xml:space="preserve">
<value>
		K0100 1
		K1001/1 part
</value>   </data>

  <data name="dfqWithInteger" xml:space="preserve">
<value>
		K0100 1
		K1010/1 1
</value>   </data>

  <data name="dfqWithDate" xml:space="preserve">
<value>
		K0100 1
		K1001/1 part
		K2001/1 characteristic
		K0001/1 1
		K0004/1 1.1.2014/10:30:59
</value>   </data>

  <data name="dfqWithEmptyKeys" xml:space="preserve">
<value>
		K0100 1
		K1001/1 part
		K1002
		K1003/1
</value>   </data>

  <data name="dfqWithUnindexedPart" xml:space="preserve">
<value>
		K0100 1
		K1001 part
		K1002 title
</value>   </data>

  <data name="dfqWithKeyAppliedToAllParts" xml:space="preserve">
<value>
		K0100 2
		K1002/0 common title
		K1001/1 part1
		K1001/2 part2
</value>   </data>

  <data name="dfqWithKeyAppliedToAllCharacteristics" xml:space="preserve">
<value>
		K0100 2
		K1001/1 part
		K2002/0 common title
		K2001/1 characteristic1
		K2001/2 characteristic2
</value>   </data>

  <data name="dfqWithKeyAppliedToAllCharacteristicsOnMultipleParts" xml:space="preserve">
<value>
		K0100 4
		K1001/1 part1
		K2002/0 common title part1
		K2001/1 part1 - characteristic1
		K2001/2 part1 - characteristic2

		K1001/2 part2
		K2002/0 common title part2
		K2001/3 part2 - characteristic1
		K2001/4 part2 - characteristic2
</value>   </data>

  <data name="dfqWithKeyAppliedToAllCharacteristicsOnOneOfMultipleParts" xml:space="preserve">
<value>
		K0100 4
		K1001/1 part1
		K2002/0 common title
		K2001/1 part1 - characteristic1
		K2001/2 part1 - characteristic2

		K1001/2 part2
		K2001/3 part2 - characteristic1
		K2001/4 part2 - characteristic2
</value>   </data>

  /**
  * This behavior is not supported by qs-STAT but we can read such AQDEF.
  */
  <data name="dfqWithKeyAppliedToAllValuesBeforeValue" xml:space="preserve">
<value>
		K0100 1
		K1001/1 part
		K2001/1 characteristic1
		K0014/0 identifier
		K0001/1 1
		K0001/1 2
</value>   </data>

  <data name="dfqWithKeyAppliedToSingleValueSet" xml:space="preserve">
<value>
		K0100 1
		K1001/1 part
		K2001/1 characteristic1
		K0001/1 1
		K0014/0 identifier
		K0001/1 2
</value>   </data>

  <data name="dfqWithKeyAppliedToEachValueSet" xml:space="preserve">
<value>
		K0100 1
		K1001/1 part
		K2001/1 characteristic1
		K0001/1 1
		K0014/0 identifier 1
		K0001/1 2
		K0014/0 identifier 2
</value>   </data>

  <data name="dfqWithMultipleKeysAppliedToAllValues" xml:space="preserve">
<value>
		K0100 2
		K1001/1 part
		K2001/1 characteristic1
		K2001/2 characteristic2
		K0001/1 1
		K0001/2 3
		K0004/0 1.1.2014/10:30:59
		K0010/0 153
		K0014/0 common identifier
		K0001/1 2
		K0001/2 4
		K0004/0 1.1.2014/10:31:00
		K0010/0 154
		K0014/0 common identifier 2
</value>   </data>

  <data name="dfqWithKeyAppliedToAllPartsSomeDefinedExplicitly" xml:space="preserve">
<value>
		K0100 2
		K1002/0 common title
		K1001/1 part1
		K1002/1 explicit title
		K1001/2 part2
</value>   </data>

  <data name="dfqWithTwoPartsWithBinaryValuesAtTheEnd" xml:space="preserve">
<value>
		K0100 2
		K1001/1 part1
		K2001/1 characteristic1
		K2004/0 0
		K1001/2 part2
		K2001/2 characteristic2
		1 0 01.01.2014/00:00:00        2 0 01.01.2014/00:00:00        
		1.1 0 01.01.2014/00:00:00        2.1 0 01.01.2014/00:00:00        
</value>   </data>

  /**
  * Both values are for characteristic1 of part1.
  * (value sets could be written after each part but all characteristics are always considered when assigning values to characteristics)
  */
  <data name="dfqWithTwoPartsWithBinaryValuesAfterEachPart" xml:space="preserve">
<value>
		K0100 2
		K1001/1 part1
		K2001/1 characteristic1
		K2004/0 0
		1 0 01.01.2014/00:00:00        
		K1001/2 part2
		K2001/2 characteristic2
		2 0 01.01.2014/00:00:00        
</value>   </data>

  <data name="dfqWithAttributeCharacteristicWithBinaryValues" xml:space="preserve">
<value>
		K0100 2
		K1001/1 part1
		K2001/1 characteristic1
		K2004/1 0
		K2001/2 characteristic2
		K2004/2 1
		1 0 01.01.2014/00:00:00        1000 0 0 0 01.01.2014/00:00:00        
		1.1 0 01.01.2014/00:00:00        1000 1 0 0 01.01.2014/00:00:00        
</value>   </data>

  <data name="dfqWithTwoPartsWithValuesAtTheEnd" xml:space="preserve">
<value>
		K0100 2
		K1001/1 part1
		K2001/1 characteristic1
		K2004/0 0
		K1001/2 part2
		K2001/2 characteristic2
		K0001/1 1
		K0001/1 1.1
		K0001/2 2
		K0001/2 2.1
</value>   </data>

  <data name="dfqWithTwoPartsWithValuesAfterEachPart" xml:space="preserve">
<value>
		K0100 2
		K1001/1 part1
		K2001/1 characteristic1
		K2004/0 0
		K0001/1 1
		K0001/1 1.1
		K1001/2 part2
		K2001/2 characteristic2
		K0001/2 2
		K0001/2 2.1
</value>   </data>

  /**
  * Values are for 3 characteristics, but only 2 are defined
  */
  <data name="dfqWithMoreValuesThanCharacteristics" xml:space="preserve">
<value>
		K0100 2
		K1001/1 part1
		K2001/1 characteristic1
		K2001/2 characteristic2
		1 0 01.01.2014/00:00:00        2 0 01.01.2014/00:00:00        3 0 01.01.2014/00:00:00        
</value>   </data>

  <data name="dfqWithKeyAppliedToAllPartsCharacteristicsAndValues" xml:space="preserve">
<value>
		K0100 2
		K1001/0 common title
		K1001/1 part
		K2002/0 common title
		K2001/1 characteristic
		K0014/0 common identifier
		K0001/1 1
</value>   </data>

  <data name="dfqWithHierarchy" xml:space="preserve">
<value>
		K0100 2
		K1001/1 part
		K2001/1 characteristic 1
		K2001/2 characteristic 2
		K2001/3 characteristic 3
		K2001/4 characteristic 4
		K2001/5 characteristic 5
		K2001/6 characteristic 6
		K5001/1 group 1
		K5001/1 group 1
		K5111/1 1
		K5112/2 1
		K5112/3 2
		K5112/4 3
		K5112/5 4
		K5112/6 5
		K5112/7 6
		K5113/8 1
		K5102/1 1
		K5103/1 3
		K5102/3 3
		K5102/3 4
		K5103/1 8
		K5102/8 5
		K5102/8 6
</value>   </data>

  <data name="dfqWithEmptySimpleAndNormalHierarchy" xml:space="preserve">
<value>
		K0100 2
		K1001/1 part
		K2001/1 characteristic 1
		K2030/1 0
		K2031/1 0
		K2001/2 characteristic 2
		K2030/2 0
		K2031/2 0
		K5111/1 1
		K5112/2 1
		K5112/3 2
		K5102/1 1
		K5102/1 2
</value>   </data>

  <data name="dfqWithSimpleAndNormalHierarchy" xml:space="preserve">
<value>
		K0100 2
		K1001/1 part
		K2001/1 characteristic 1
		K2030/1 1
		K2031/1 0
		K2001/2 characteristic 2
		K2030/2 0
		K2031/2 1
		K5111/1 1
		K5112/2 1
		K5112/3 2
		K5102/1 1
		K5102/1 2
</value>   </data>

  <data name="dfqWithAdditionalDataForLastValue" xml:space="preserve">
<value>
		K0100 2
		K1001/1 part1
		K2001/1 characteristic1
		1 0 01.01.2014/00:00:00        
		2 0 01.01.2014/00:00:00        
		K0014/1 partId2
</value>   </data>

  <data name="dfqWithAdditionalDataForValueWithIndex" xml:space="preserve">
<value>
		K0100 2
		K1001/1 part1
		K2001/1 characteristic1
		1 0 01.01.2014/00:00:00        
		2 0 01.01.2014/00:00:00        
		K0014/1/1 partId1
</value>   </data>

  <data name="dfqWithAdditionalDataForValueWithIndexAndAllCharacteristics" xml:space="preserve">
<value>
		K0100 2
		K1001/1 part1
		K2001/1 characteristic1
		K2001/2 characteristic2
		1 0 01.01.2014/00:00:00        2 0 01.01.2014/00:00:00       
		3 0 01.01.2014/00:00:00        4 0 01.01.2014/00:00:00       
		K0014/0/1 partId1
</value>   </data>

  <data name="dfqWithAdditionalDataForAllValuesOfSingleCharacteristic" xml:space="preserve">
<value>
		K0100 2
		K1001/1 part1
		K2001/1 characteristic1
		K2001/2 characteristic2
		1 0 01.01.2014/00:00:00        2 0 01.01.2014/00:00:00       
		3 0 01.01.2014/00:00:00        4 0 01.01.2014/00:00:00       
		K0014/1/0 partId1
</value>   </data>

  <data name="dfqWithValueIndexPlacedOnCharacteristicKKey" xml:space="preserve">
<value>
		K0100 2
		K1001/1 part1
		K2001/1 characteristic1
		K2002/1/1 invalid characteristic name
		1 0 01.01.2014/00:00:00        
		2 0 01.01.2014/00:00:00        
</value>   </data>

  <data name="dfqWithInvalidIndex" xml:space="preserve">
<value>
		K0100 2
		K1001/1 part1
		K2001/1-1 characteristic1
		1 0 01.01.2014/00:00:00        
</value>   </data>

  <data name="dfqWithEmptyValueIndex" xml:space="preserve">
<value>
		K0100 2
		K1001/1 part1
		K2001/1 characteristic1
		1 0 01.01.2014/00:00:00        
		K0014/1/ partId1
</value>   </data>
</root>